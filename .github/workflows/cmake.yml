name: Build

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: ${{ github.ref_name }}
        type: string
  pull_request:

jobs:
  build_linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Install dep packets
        working-directory: ${{github.workspace}}
        run: |
          sudo add-apt-repository 'deb http://mirror.yandex.ru/ubuntu/ hirsute main universe' -y
          sudo apt-get update
          sudo apt-get --assume-yes install curl zip unzip tar pkg-config gcc-11-multilib g++-11-multilib ninja-build cmake
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 10
          sudo dpkg --add-architecture i386
          sudo apt-get install -y --no-install-recommends \
            gcc-multilib g++-multilib libstdc++6 lib32stdc++6 \
            libc6-dev libc6-dev-i386 linux-libc-dev \
            linux-libc-dev:i386 clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Install vcpkg packets
        working-directory: ${{github.workspace}}
        run: |
          cp cmake/x86-linux-sm.cmake dep/vcpkg/triplets/x86-linux-sm.cmake
          ./dep/vcpkg/bootstrap-vcpkg.sh -musl
          ./dep/vcpkg/vcpkg install --triplet x86-linux-sm --debug

      - name: Getting SourceMod
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/sourcemod
          path: sourcemod
          submodules: recursive

      - name: Switch to debug symbol sourcepawn branch
        run: |
          cd sourcemod/sourcepawn
          git remote add peace https://github.com/peace-maker/sourcepawn.git
          git fetch peace
          git switch debug_api_symbols
          git submodule update --init --recursive

      - name: Getting ambuild
        run: |
          python -m pip install wheel
          pip install git+https://github.com/alliedmodders/ambuild

      - name: Compiling SourcePawn VM
        working-directory: sourcemod/sourcepawn
        shell: bash
        run: |
          python configure.py --enable-optimize --targets x86,x86_64
          ambuild objdir
          mkdir -p "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/x64"
          if [ -f objdir/libsourcepawn/linux-x86/libsourcepawn.so ]; then
            cp objdir/libsourcepawn/linux-x86/libsourcepawn.so "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/sourcepawn.jit.x86.so"
            cp objdir/libsourcepawn/linux-x86_64/libsourcepawn.so "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/x64/sourcepawn.vm.so"
          else
            cp objdir/libsourcepawn/windows-x86/libsourcepawn.dll "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/sourcepawn.jit.x86.dll"
            cp objdir/libsourcepawn/windows-x86_64/libsourcepawn.dll "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/x64/sourcepawn.vm.dll"
          fi

      - name: Configure CMake
        run: |
          rm -rf build
          cmake -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE="./dep/vcpkg/scripts/buildsystems/vcpkg.cmake"  -DVCPKG_TARGET_TRIPLET=x86-linux-sm  -DCMAKE_CXX_FLAGS_INIT="-m32" -DCMAKE_C_FLAGS_INIT="-m32"
          cmake --build build -j
          tree .

      - name: Deploy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: ${{github.workspace}}/build/sm_debugger.ext.so

  build_windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Install ninja
        run: choco install ninja

      - name: setup devcmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      - name: Install vcpkg packets
        working-directory: ${{github.workspace}}
        run: |
          .\dep\vcpkg\bootstrap-vcpkg.bat
          .\dep\vcpkg\vcpkg install --triplet x86-windows-static

      - name: Getting SourceMod
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/sourcemod
          path: sourcemod
          submodules: recursive

      - name: Switch to debug symbol sourcepawn branch
        shell: bash
        run: |
          cd sourcemod/sourcepawn
          git remote add peace https://github.com/peace-maker/sourcepawn.git
          git fetch peace
          git switch debug_api_symbols
          git submodule update --init --recursive

      - name: Getting ambuild
        run: |
          python -m pip install wheel
          pip install git+https://github.com/alliedmodders/ambuild

      - name: Compiling SourcePawn VM
        working-directory: sourcemod/sourcepawn
        shell: bash
        run: |
          python configure.py --enable-optimize --targets x86,x86_64
          ambuild objdir
          mkdir -p "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/x64"
          if [ -f objdir/libsourcepawn/linux-x86/libsourcepawn.so ]; then
            cp objdir/libsourcepawn/linux-x86/libsourcepawn.so "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/sourcepawn.jit.x86.so"
            cp objdir/libsourcepawn/linux-x86_64/libsourcepawn.so "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/x64/sourcepawn.vm.so"
          else
            cp objdir/libsourcepawn/windows-x86/libsourcepawn.dll "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/sourcepawn.jit.x86.dll"
            cp objdir/libsourcepawn/windows-x86_64/libsourcepawn.dll "${{ github.workspace }}/sp-console-debugger/objdir/package/addons/sourcemod/bin/x64/sourcepawn.vm.dll"
          fi

      - name: Configure CMake
        working-directory: ${{github.workspace}}
        run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="./dep/vcpkg/scripts/buildsystems/vcpkg.cmake"  -DVCPKG_TARGET_TRIPLET=x86-windows-static

      - name: Build
        working-directory: ${{github.workspace}}
        run: |
          cmake --build build --config Release --parallel
          tree ${{github.workspace}}

      - name: Deploy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: ${{github.workspace}}/build/sm_debugger.ext.dll

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build_windows, build_linux]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Deploying linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux

      - name: Deploying windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows

      - name: Archive artifacts
        run: |
          mkdir -p addons/sourcemod/extensions
          cp sm_debugger.ext.dll sm_debugger.ext.so addons/sourcemod/extensions
          touch addons/sourcemod/extensions/sm_debugger.autoload
          7z a -tzip sm_debugger-bin-${RELEASE_VERSION}.zip addons

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: sm_debugger-bin-*.zip